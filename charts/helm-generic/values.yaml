## Default values for chart.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: docker.io/nginx
  ## Should be set to IfNotPresent, if you are running a final image version
  pullPolicy: Always
  ## Overrides the image tag
  tag: latest

imagePullSecrets: []
# imagePullSecrets:
#   - name: hub-argos-jenkins
nameOverride: ""
fullnameOverride: ""

namespace: default

## Specifies port of container, default for openliberty containers is 9080
containerPort: 80

## Use vars to create a configMap, that will be referenced as environment variables within your containers
#vars:
#  param: Hello
## You can also create environment variables from existing kubernetes secret object.
## By default, Generico will look for a secret named exactly as your release
secretEnabled: false
# secretName: my-custom-secret
## Use extraEnv for defining additional environment secrets. Can be used for example to access a secret key in an existing secret
#extraEnv:
#  - name: PASSWORD
#    valueFrom:
#      secretKeyRef:
#        name: mysecret.credentials
#        key: password

serviceAccount:
  ## Specifies whether a service account should be created
  create: true
  ## Annotations to add to the service account
  annotations: {}
  ## The name of the service account to use.
  ## If not set and create is true, a name is generated using the fullname template
  name: ""

## use strategy to define a specific deployment strategy for your deployment
#strategy:
#  rollingUpdate:
#    maxSurge: 1
#    maxUnavailable: 1
#  type: RollingUpdate

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

## currently, only one ingress with one specific host is supported
ingress:
  enabled: false
  annotations: {}
  host: chart-example.local
  path: /
  tlsEnabled: false
  ## set to true, if the ingress default certificate should be used
  useDefaultCertificate: false
## You can also reference to a specific secret with a TLS certificate
#  secretName: my-own-tls-secret


## Add volume mounts to your application
## for creating a pvc (persistent volume claim) use following
# volumes:
#  - name: data
#    mountPath: /data
#    size: 10Gi
#    storageClass: default
## use existing pvc
# volumes:
#  - name: existing-data
#    mountPath: /existing-data
#    existingClaim: existing-pvc
## If you want to create a volume from an existing secret use:
# fileSecrets:
#  - name: account-key
#    mountPath: /account-key
#    subPath: application.json
#    secretName: my-app-existing-secret
#    mode: "0644"

## For more flexability you can define extra volumes and extra mounts
#extraVolumes:
#  - configMap:
#      defaultMode: 420
#      name: cm-data
#    name: cm-data
#extraVolumeMounts:
#  - name: cm-data
#    subPath: nginx.conf
#    mountPath: /etc/nginx/nginx.conf
#    readOnly: true
#  - name: cm-data
#    subPath: config.js
#    mountPath: /usr/share/nginx/html/config.js
#    readOnly: true
#  - name: cm-data
#    mountPath: /cm-data
#    configMap:
#      name: cm-data

## Handler for container lifecycle events
## https://kubernetes.io/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/
#podLifecycle:
#  postStart:
#    exec:
#      command: [ "/bin/sh", "-c", "echo Hello from the postStart handler > /usr/share/message" ]

## The resources should be adjust to your specific needs!
## For application running openliberty the following has been established as good practice:
resources:
  limits:
    cpu: 400m
    memory: 256Mi
  requests:
    cpu: 50m
    memory: 256Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

probe:
  enabled: false
  path: "/"
  settings:
    initialDelaySeconds: 0
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 3
    failureThreshold: 3

## Before you use a liveness probe: https://srcco.de/posts/kubernetes-liveness-probes-are-dangerous.html
livenessProbe:
  enabled: false
  path: "/"
  settings:
    initialDelaySeconds: 0
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 3
    failureThreshold: 3

nodeSelector: {}

tolerations: []

affinity: {}


#secrets:
#  - name: argo-git-login
#    namespace: argocd
#    encryptedData:
#      password: AgCJOy+6/fdhZyNMgWLK+cxq9qXt1u3nOJ824j1iqICJqW/UA28cx9JrnX7le4QM89+om08sD1B4WPzwo3Oe2Ss6KywHj0+AI2hS9orlZDrDLBxJ44HTerj5LW5KUbwyzbz8u5vrUBHFtUBQA3g+qHUDx6VKIobwAnB+ikcJk3YJnH/m1qI8psd8Ds6kmVMlIs9G5BxvibCyrDbjqG6n5LWYRDj5PZw6v6Ggto5QQ+hEvp6h9GrE3PEYPeV5x0mZ9VvkbGWPnSE4pIrkCGpv1kayhxBPBT+bWWGmtDK2qVJtNEr5hEcA9ofF+lsS0/XHE176LiDpz4C6r4rlGAqGNGsTg/Ffqz4c8nh4RQrncozshQU9zj5UbKinXHnEe9nXOdCY4zqmffFVCYH6SdymK3ut3ffvZIZkoN5tJHlgdPlujId2C95aNOo05dJfnwRKVWXnekYmUJVUmZXUGsA0CJFjUbS7uBGnptIdvumlSStMU7WNLZM3U43cMWi4rgqITbM1iRrL38iXcGU2GKpJqG0BeGjU0+qYldKwv9Ay9KaWyxFcZ/dxlQSBZzcwtRt4kbaZVNqc7df5kBDHsVDJGqoEKqVd+N+JLHoauNdn2XzLN9fZYyKkuXjs/wZgC+YET6tZRdrWSzZkxvuCe/ZsEEzNyVHndBBiY9Uk2K/olHUXHChqKP6odHp6TjpSyYh1J87Sxus92u0G6i/JG814jRVK7h1J
#      url: AgAFOiwJpVwrrx4EIQpy6KxYa3cdEUBv87ukihLJt0fzs4YorbhwbtfmjSyOf6n3wAdB67zHG7Pxk2uGxo4Vr8IbgobfiowydrjQ/T4gWqJjplZ1rkrORAbq4hWXBCG+eVUK8A/9xPQ6+l/fygVPNxF2Y/ChxFawV51Si5jhPg1ioo4kCXuaOr9VoXF/lkW+Lb9OHoezj6GM3vhaWtnKR3rG0ldWjQOazeHwkh47tpWk9uJX85AjhS1xohEZDojYQNgrADP0TvAdhhnnGo6/huBw1JHJoLqpBnTM7N2gVbtCwUc4eYrdDCNKRlOHUI9Hk+sNUTxpSq/O/qWKnYmXFAehZtic5iuSyOLpiMv6Kl9PtdWZgl/y35k4L185twDCm9CeT4X0cWYpZDGXzZ1KolsYiOVeuGLvdJZGLlizBgR7olHFdkHp5BT0nbFwlKf6hdX77WuUL7NoidGq+/LQFZbZvHYQF/hQWAFisi6pePSmJ58ajR6iQVd8/15xZD2R94uaU6KRt+GqVUMSJtYRVBWmg87WcVSv924FCpKMV55EwW/f/2sxgbn+MuJPnqqKkTJnYSeR6Kwa0rLYo7O8EqqkojQEHW5Q/hY3OTgtmWO+11P7xrDcJDDNvs2QPB7qCUQm0LJNQt7Rr5F4IO/WPJw20c0UGtl6PH4xfjkmQnH8cyeKV8Zy9ZQRf16w8zIIArnoff7NjhFkOW2s33sPTSUWh9zFm32gSgmAPQ+wGt7iKfeiplz5hl7/xKHuXOHrlw==
#      username: AgA+35VjkkCENwdpmlfsc+6+wnK0n1pPiOylzVdFPiSrDwdZkDnMPLggpjrYltGfPepE9bY1wTpBtADyyqkrDjMFBlrHSOIrOkGa7iZ07LvZgsPimZ36CoiQNzj5Qbjdrwr9cq1HuE0azcrxTVuwgJv4ntSi0wT3Zu+L/oL4K2l/qF6Iua2tqiqXdn6tEzDaZY0iTbISXSjwg1oQE/gQ80WWl8Eot9MR0hMLZ4W6a6ol9dQCeOgRw+R0tcgTs6BSDTj1AKOBBHX5hzi1mhbp1JIhfgPH8zWWpA8SGThbu+rL7JPHtThnBYmPf5ZXbrHfRK+52/y58ysTXzjUfq9CGXPXfxRjlggAwWyPhdIl+7rPJLm9yEjVdrQggYVeCdjWF60X27GDOQE8alkLDRv8Op91mmiHDRG8lRPn7WeK/eHz4ldhdRoUS+9/PCBm8L4lRKa3KV82V5IFyabQL+atTpvinv7FrduZz6Ol05yAF3Ezf7/LV5RSpKSZHRCuMygQ6wLyt1Cejy+K7U4uYnNIkDKcdOg1Jpm5exmMWTXWw9UpgtJCpv4s4jeQdh5UK9z1GqpK5VjHdyvnw413s+22EKq4Bo7bN1jubU03NfxALAksuCM0OiGR0YBTNHLZORU3IknurHTgU3HCqNfna7V/347E/bffWPF75y4wzKg93qgLu0ifT+uHkuB0zZjHCmD6u0FqPkDy3RP9cC3GImN/ng==
#    labels:
#      argocd.argoproj.io/secret-type: repository
#    annotations:
#      replicator.v1.mittwald.de/replicate-to: "my-ns-1,namespace-[0-9]*"
#  - name: docker-login
#    namespace: docker
#    encryptedData:
#      .dockerconfigjson: AgB7jORfAB7vbokUDlRkVhyVR5mt5fmWLNtV6nZ+lcbKcjm0o3rOe73TJEYcR05RBVayl65be86NPB0kuFpr+eCWwYkw3YQYnJ17re/6dgJBN5uG7M04t0CbyEMxV9vAQer7tN29boMLfiLSv1SYSFCjzLHVHQwha5EJyNPGFktBkj65odIsNLvy79Und9vFS7iwLS6xnWML8hELirPRqV3pELU3PDTakkQWr77okrAkk+v9lCq07hdGZTp2Xfb/Qh2PGgVZXRYU8V0X03OMY6rf7/fzTbdDc6i5u+trottj+I345XPkgSAj3EGEoGWu5s9DjeWV8QJet/vtcmidMqipqDt3s/1mObdY7gRm1SApUkFXTKnYDTWBBs/S/o2PZ3C8YWGC96QwShL5vBACQzISuDUAzs6EgB0nhlJonp/OJSyTSNR393pe1z1/lVbXNIoY+qJfQpOi8zIv9+pT+oTxGHT7Gj5FLZUK9Pk4SCA1KyWE7a5iRcen5Ukm/VTwN1c45ntu9DUZ+oORfk9f3ZZ6VXSmuKPMqiGV/oW0Hidw30AH0J/alL8KANMwMCVHDipCpv4nXtKlhTMIZ6+HpUlvzPrLjx5Z2rcXrqVmMIo/cCzVtDdwleFDb6IznBNk8jWrUGGVk9Q/Fg86zsVFGZrxJ+qDKDCMqYvrdZuJo3hnK6arWZEBti1r1YPbDmBhcW9JjMYzd3iggemp8jxmNK7OW697FH9B08AiPk02RtbwoQw7VNLMDgL9WwcUhGlgktAyLQnu84dOzyaQgX/hzzAuCQp1L2LzDEz8y2PK71/ovtnhzUepiWUUdvcwiQJAr7AvR2zdQoLBeX+t+JCJF0MxYUeeZ7sx2ck9gHMfvFkhdpq5tfZ0zGcNYQ90R8KcY/JiXCQoplgfSWTEHSN3vbU8elZXcB2yiVQx14462SgEKQXHmP0K
